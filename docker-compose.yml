services:
    api:
        build:
            context: .
            dockerfile: '.docker/Dockerfile'
            target: dev
        image: app/api
        restart: on-failure
        volumes:
            - '.:/var/www/html'
        networks:
            - app
        depends_on:
            - pgsql
            - redis
    nginx:
        build:
            context: .
            dockerfile: '.docker/Dockerfile-nginx'
        image: app/nginx
        ports:
            - '${FORWARD_APP_PORT:-80}:80'
        networks:
            - app
        depends_on:
            - api
    horizon:
        build:
            context: .
            dockerfile: '.docker/Dockerfile'
            target: dev
        image: app/api
        restart: on-failure
        volumes:
            - '.:/var/www/html'
        command: 'php artisan horizon'
        networks:
            - app
        depends_on:
            - api
    pgsql:
        image: 'postgres:16.0-alpine'
        ports:
            - '${FORWARD_DB_PORT:-5432}:5432'
        environment:
            POSTGRES_DB: '${DB_DATABASE}'
            POSTGRES_PASSWORD: '${DB_PASSWORD}'
        volumes:
            - 'app-pgsql:/var/lib/postgresql/data'
            - './.scripts/db/pgsql/create-testing-database.sql:/docker-entrypoint-initdb.d/10-create-testing-database.sql'
        networks:
            - app
        healthcheck:
            test: [ "CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}" ]
            retries: 3
            timeout: 5s
    redis:
        image: 'redis:alpine'
        ports:
            - '${FORWARD_REDIS_PORT:-6379}:6379'
        volumes:
            - 'app-redis:/data'
        networks:
            - app
        healthcheck:
            test: [ "CMD", "redis-cli", "ping" ]
            retries: 3
            timeout: 5s
    mailpit:
        image: 'axllent/mailpit:latest'
        ports:
            - '${FORWARD_MAILPIT_PORT:-1025}:1025'
            - '${FORWARD_MAILPIT_DASHBOARD_PORT:-8025}:8025'
        networks:
            - app
    s3:
        image: 'minio/minio:latest'
        restart: 'on-failure'
        ports:
            - "${FORWARD_S3_API_PORT:-9000}:9000"
            - "${FORWARD_S3_CONSOLE_PORT:-9001}:9001"
        env_file: '.env'
        environment:
            MINIO_ROOT_USER: "${AWS_ACCESS_KEY_ID}"
            MINIO_ROOT_PASSWORD: '${AWS_SECRET_ACCESS_KEY}'
        command: 'server --address :9000 --console-address :9001 /data'
        volumes:
            - './.s3data:/data'
        networks:
            - app
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://127.0.0.1:9000/minio/health/live" ]
            interval: 30s
            timeout: 20s
            retries: 3
networks:
    app:
        driver: bridge
volumes:
    app-pgsql:
        driver: local
    app-redis:
        driver: local
